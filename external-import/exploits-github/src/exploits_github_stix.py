# coding: utf-8
import datetime
import re

# Importing the JSON module
import json
import sys

# Umporting the STIX module
import stix2
from pycti import Identity, Malware
from sqlite_to_json import sqliteToJson

def convert(filename, output="output.json"):
    list_added_exploit = []
    # Create the default author
    author = stix2.Identity(
        id=Identity.generate_id("GitHub", "organization"),
        name="GitHub",
        identity_class="organization",
    )
    sqliteToJson(filename)
    with open('cve_db.json') as json_file:
        malwares_bundle = [author]
        data = json.load(json_file)
        for edb in data:
            malware_types = 'exploit-kit'
            is_family = False
            # Get the name
            name = edb["full_name"]

            # Get the description (= name)
            description = "GitHub : " + edb["description"] 

            # Create external references
            external_reference = stix2.ExternalReference(
                source_name="GitHub", url=edb["url"]
            )
            external_references = [external_reference]
            
            # Getting the different fields
            publication_date = datetime.datetime.strptime(edb["created_at"],'%Y-%m-%dT%H:%M:%SZ')
            reg = re.search('(CVE|cve)(-|_)\d{4}(-|_)\d{3,5}', edb["full_name"])
            if reg:
                cve = reg.group(0)
                cve = cve.replace('cve','CVE')
                cve = cve.replace('_','-')
            else:
                cve = ''

            # Creating the malware with the extracted fields
            malw = stix2.Malware(
                id=Malware.generate_id(name),
                name=name,
                first_seen=publication_date,
                description=description,
                #created_by=author,
                malware_types=malware_types,
                is_family=is_family,
                external_references=external_references,
                custom_properties={
                    "x_opencti_malware_cve": cve,
                },
            )
            list_added_exploit.append([Malware.generate_id(name),cve])
            # Adding the malware to the list of malwares
            malwares_bundle.append(malw)
    # Creating the bundle from the list of malwares
    bundle = stix2.Bundle(malwares_bundle, allow_custom=True)
    bundle_json = bundle.serialize()
    # Write to file
    with open(output, "w") as f:
        f.write(bundle_json)
    return list_added_exploit


if __name__ == "__main__":
    convert(sys.argv[1], sys.argv[2])
