# coding: utf-8
import datetime
import base64

# Importing the JSON module
import json
import sys

# Umporting the STIX module
import stix2
from pycti import Identity, Malware


def convert(filename, output="output.json"):
    list_added_exploit = []
    # Create the default author
    author = stix2.Identity(
        id=Identity.generate_id("Exploit DB", "organization"),
        name="Exploit DB",
        identity_class="organization",
    )
    with open(filename) as json_file:
        malwares_bundle = [author]
        data = json.load(json_file)
        for edb in data:
            malware_types = 'exploit-kit'
            is_family = False
            # Get the name
            name = edb["title"]

            # Get the description (= name)
            description = "ExploitDB : " + name 

            # Get the code
            code = base64.b64decode(edb["edb_code"]).decode('utf-8')

            # Create external references
            external_reference = stix2.ExternalReference(
                source_name="ExploitDB", url=edb["references"]["url-description"]
            )
            external_references = [external_reference]
            
            # Getting the different fields
            publication_date = datetime.datetime.strptime(edb["publication-date"],"%Y-%m-%d")
            cve = edb["cve"]
            author = edb["author"]
            type_exploit = edb["type"]
            platform = edb["platform"]
            verified = str(edb["verified"]) + " (according to ExploitDB)"

            # Creating the malware with the extracted fields
            malw = stix2.Malware(
                id=Malware.generate_id(name),
                name=name,
                first_seen=publication_date,
                description=description,
                #created_by=author,
                malware_types=malware_types,
                is_family=is_family,
                external_references=external_references,
                custom_properties={
                    "x_opencti_malware_cve": cve,
                    "x_opencti_malware_type_exploit": type_exploit,
                    "x_opencti_malware_platform": platform,
                    "x_opencti_malware_verified": verified,
                    "x_opencti_malware_code": code,
                },
            )
            list_added_exploit.append([Malware.generate_id(name),cve])
            # Adding the malware to the list of malwares
            malwares_bundle.append(malw)
    # Creating the bundle from the list of malwares
    bundle = stix2.Bundle(malwares_bundle, allow_custom=True)
    bundle_json = bundle.serialize()
    # Write to file
    with open(output, "w") as f:
        f.write(bundle_json)
    return list_added_exploit


if __name__ == "__main__":
    convert(sys.argv[1], sys.argv[2])
